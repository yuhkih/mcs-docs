[{"id":0,"href":"/docs/rosa-hcp/applications/rosa-hcp-deploy-app/rosa-hcp-deploy-app/","title":"1. Hello world コンテナのデプロイ","section":"Application の作成","content":" 1. 簡単なサンプルコンテナをデプロイしてみる # hello-openshift という Web Server のコンテナをデプロイしてみます。アクセスすると、メッセージを返すシンプルなコンテナです。\nhello-openshift という project (OpenShift で使われる namespace の拡張概念) を作成します\noc new-project hello-openshift hello-openshift イメージを使った deployment を作成します。名前はコンテナ名と同じ　hello-openshift にします。\noc create deployment hello-openshift --image=quay.io/openshift/origin-hello-openshift deployment が作成されたか確認します。\noc get deployment service を作成します。 hello-openshift コンテナが使用している 8080 を公開します。service は deployment を expose する事で作成可能です。 (コンテナイメージがどのポートを使用しているかをコマンド等で突き止める事もできますが、基本的に事前に知っている必要があります。)\noc expose deployment hello-openshift --port=8080 補則：oc create service clusterip hello-openshift --tcp=8080:8080 でも上の操作と同じ事が可能です。\nOpenShift での ingress と同等の概念である route を作成します。HTTP アプリケーションの場合、route は、service を expose する事で作成可能です。\noc expose service hello-openshift route が作成されたか確認します。\noc get route 以下のような出力になるはずです。環境によって URL は違います。route の名前は、公開した service と同じ名前になっているはずです。これは、HTTP(Port 80) から Service の 8080 にマッピングされている事を意味しています。\n$ oc get route NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD hello-openshift hello-openshift-test2.apps.rosa.my-hpc-cluster.rc4b.p3.openshiftapps.com hello-openshift 8080 None $ 作成された route にアクセスしてみます。\n$ curl hello-openshift-test2.apps.rosa.my-hpc-cluster.rc4b.p3.openshiftapps.com Hello OpenShift! $ 2. 作成したアプリのレプリカ数を増やしてみる # 可用性を保つために Pod の replica 数を3つに増やしてみます。\noc scale deployment hello-openshift --replicas=3 Pod が ３つになっている事を以下のコマンドで確認します。\noc get pods ３つに増やしても引き続きアプリケーションにアクセスできることを curl コマンドで確認します。(アクセス先 URL は oc get route で表示される URL です)\ncurl hello-openshift-test2.apps.rosa.my-hpc-cluster.rc4b.p3.openshiftapps.com 3. デプロイしたアプリケーションを削除する # 作成した deployment、service、route は、project を削除することで全て消す事ができます。 以下のコマンドで実験で使用したアプリケーションを削除します。\noc delete project hello-openshift 4. oc new-app を使用して簡単なサンプルコンテナをデプロイしてみる # 前回は kubernetes の kubectl コマンドと共通の oc コマンドを使用してコンテナをデプロイしましたが、今度は同じ事を OpenShift の独自コマンドを使用して行ってみます。\n新しい project を作成します。\noc new-project hello-openshift2 以下のコマンドで hello-openshift コンテナを使った deployment と service を一気に作成します。この oc new-app は OpenShift の独自コマンドです。 container のイメージが公開している port の情報を持っている場合は、service まで作成してくれます。\noc new-app hello-openshift --image quay.io/openshift/origin-hello-openshift route を作成します。\noc expose service hello-oppenshift 作成された route を確認します。\noc get route curl コマンドでアクセスして確認します。\n$ curl hello-openshift-hello-openshift.apps.rosa.my-hpc-cluster.rc4b.p3.openshiftapps.com Hello OpenShift! $ ちょっとだけですが、OpenShift の独自コマンドを使うことで手数を減らす事ができるようになっています。\n"},{"id":1,"href":"/docs/rosa-hcp/basic_features/rosa-cli-walk-through/rosa-cli-walk-through/","title":"1. rosa CLI","section":"ROSA 基本機能","content":" 1. 作成されたクラスターのリスト # アカウントに紐付いている ROSA クラスターの一覧を表示します。\nrosa list clusters コマンド実行例 ↕ $ rosa list clusters ID NAME STATE TOPOLOGY 27vfb6mckkl9ndle98vvcgchc2nlc54m my-hpc-cluster ready Hosted CP $ 2. machinepool のリスト # machinepool は、ROSA で用いられてる Worker Node をグループ化した概念です。 同じサイズのインスタンスで構成されています。\nrosa list machinepools -c $CLUSTER_NAME コマンド実行例 ↕ $ rosa list machinepools -c $CLUSTER_NAME ID AUTOSCALING REPLICAS INSTANCE TYPE LABELS TAINTS AVAILABILITY ZONE SUBNET VERSION AUTOREPAIR workers-0 No 1/1 m5.xlarge us-east-2c subnet-00e5abea4e74f6852 4.14.4 Yes workers-1 No 1/1 m5.xlarge us-east-2b subnet-047bd69e1ae06c742 4.14.4 Yes workers-2 No 1/1 m5.xlarge us-east-2a subnet-0c52bfe790deb6429 4.14.4 Yes $ 3. ingress のリスト # ROSA クラスター内に作成されいてる ingress を表示します。\nrosa list ingress -c $CLUSTER_NAME コマンド実行例 ↕ $ rosa list ingress -c $CLUSTER_NAME ID APPLICATION ROUTER PRIVATE DEFAULT ROUTE SELECTORS LB-TYPE EXCLUDED NAMESPACE WILDCARD POLICY NAMESPACE OWNERSHIP HOSTNAME TLS SECRET REF c7n0 https://apps.rosa.my-hpc-cluster.pd80.p3.openshiftapps.com no yes nlb $ 4. ROSA が使用可能なリージョンの表示 # ROSA がサポートされている AWS リージョンを表示します。\nrosa list regions コマンド実行例 ↕ $ rosa list regions ID NAME MULTI-AZ SUPPORT HOSTED-CP SUPPORT ap-northeast-1 Asia Pacific, Tokyo true false ap-northeast-2 Asia Pacific, Seoul true false ap-northeast-3 Asia Pacific (Osaka) true false ap-south-1 Asia Pacific, Mumbai true false ap-southeast-1 Asia Pacific, Singapore true false ap-southeast-2 Asia Pacific, Sydney true false ca-central-1 Canada, Central true false eu-central-1 EU, Frankfurt true true eu-north-1 EU, Stockholm true false eu-west-1 EU, Ireland true true eu-west-2 EU, London true false eu-west-3 EU, Paris true false sa-east-1 South America, São Paulo true false us-east-1 US East, N. Virginia true true us-east-2 US East, Ohio true true us-west-1 US West, N. California false false us-west-2 US West, Oregon true true $ 5. インスタンスタイプの表示 # ROSA がサポートしている AWS の EC2インスタンスタイプを表示します。\nrosa list instance-types コマンド実行例 ↕ $ rosa list instance-types ID CATEGORY CPU_CORES MEMORY dl1.24xlarge accelerated_computing 96 768.0 GiB g4dn.12xlarge accelerated_computing 48 192.0 GiB g4dn.16xlarge accelerated_computing 64 256.0 GiB g4dn.2xlarge accelerated_computing 8 32.0 GiB g4dn.4xlarge accelerated_computing 16 64.0 GiB g4dn.8xlarge accelerated_computing 32 128.0 GiB \u0026lt;省略\u0026gt; m5d.4xlarge storage_optimized 16 64.0 GiB m5d.8xlarge storage_optimized 32 128.0 GiB m5d.xlarge storage_optimized 4 16.0 GiB $ "},{"id":2,"href":"/docs/rosa-hcp/create-delete/rosa-hcp-enable/","title":"1. ROSA HCP の有効化","section":"ROSA Cluster の作成と削除","content":" 1. Red Hat Account の作成 # Red Hat Account を作成します。メールアドレス等が必要になります。 この Red Hat Account を使用して、サポートの問い合わせなどを行います。\nこちら にアクセスして作成します。Red Hat アカウントは無料で作成できます。\n2. ROSA の有効化と前提条件の確認 # 2.1. ROSA HCP の有効化 # 以下のリンクをクリックして AWS の ROSA 設定画面に飛びます。 https://console.aws.amazon.com/rosa/home#/get-started\n[Enable ROSA with HCP] のボタンをクリックします。 有効化されるまで、暫く待ちます。数分かかるはずです。 有効化が完了すると以下のような表示になります。 2.2. Service Quota の確認 # もし Service Quota が足りない場合はチケットを上げて確認します。最終的に以下の状態になっていれば大丈夫です。 2.3. ELB サービスにリンクされたロールの作成 # 過去に ELB をデプロイした事があれば AWSServiceRoleForElasticLoadBalancing というIAM Role が作成されており、以下のような表示になっているはずです。\nもし作成されていない場合は、以下のコマンドで作成します。\naws iam create-service-linked-role --aws-service-name \u0026#34;elasticloadbalancing.amazonaws.com\u0026#34; 2.4. Red Hat Customer Portal の情報とリンクする # 画面の一番下に移動して「Continue Red Hat」をクリックします。 Red Hat の ポータルサイトにログインします。(Red Hat Customer Portal アカウントが無い場合は、作成してから、再度こちら にアクセスします。Red Hat アカウントは無料で作成できます） 日本語を選んで「Connect accounts] をクリックします。 以上で前提条件の確認は完了です。\n3. ROSA 作成用の token の取得 # ROSA cluster を作成するためには、Red Hat が提供する token が必要です。以下のコマンドを実行します。\nrosa login 以下のように聞かれます。\n$ rosa login To login to your Red Hat account, get an offline access token at https://console.redhat.com/openshift/token/rosa ? Copy the token and paste it here: 表示されたリンク https://console.redhat.com/openshift/token/rosa にログインして、token を取得します。Red Hat Portal の ID (無料) が必要になるので、作って無い場合は、作成してからこのリンクに再びアクセスします。\n以下の画面が表示されるので、Token をコピーしてプロンプトに貼り付けます。 以下のように login を完了させます。\n$ rosa login To login to your Red Hat account, get an offline access token at https://console.redhat.com/openshift/token/rosa ? Copy the token and paste it here: ****************************************************************************************************************************************************************************************************** I: Logged in as \u0026#39;yuhkih\u0026#39; on \u0026#39;https://api.openshift.com\u0026#39; $ "},{"id":3,"href":"/docs/rosa-hcp/create-delete/rosa-hcp-prepare/","title":"2. CLIの準備","section":"ROSA Cluster の作成と削除","content":" 1. AWS CLI の準備 # こちらの AWS のページを参考にして AWS CLI をインストールします。\naws configure を使用して、AWS Access Key ID や AWS Secret Access Key の値を構成します。\nAWS Access Key ID や AWS Secret Access Key は、AWS Console から取得できます。こちら を参考にしてください。\naws configure と入力すると、必要な値を聞いてくるので入力します。また、仕様する AWS Region も聞いて来ますが、ここでは ap-northeast-1 と入力します。\naws configure 構成例 ↕ $ aws configure AWS Access Key ID [None]: ABCDEFG1234567890KKNUK AWS Secret Access Key [None]: abcedefghijklmn012345678abcdefg Default region name [None]: an-northeast-1 Default output format [None]: $ 以下のコマンドを実行して正しく構成されているか確認します。\naws sts get-caller-identity 出力例 ↕ $ aws sts get-caller-identity { \u0026#34;UserId\u0026#34;: \u0026#34;ABCD1234BG6WLHYHMKFHK\u0026#34;, \u0026#34;Account\u0026#34;: \u0026#34;123407415212\u0026#34;, \u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:iam::366607415212:user/myname@redhat.com-4w685\u0026#34; } 2. Git CLI の準備 # こちらのページを参照に git コマンドをインストールします。\n以下のコマンドを実行して正しく構成されているか確認します。\ngit version 出力例 ↕ $ git version git version 2.17.1 $ 3. OpenShift / ROSA の CLI の準備 # 1.OpenShift のocコマンドと ROSA 専用の追加コマンドであるrosa コマンドをダウンロードして展開します。\ncurl -LO https://mirror.openshift.com/pub/openshift-v4/clients/rosa/latest/rosa-linux.tar.gz tar -zxf rosa-linux.tar.gz sudo mv ./rosa /usr/local/bin/ rosa download oc tar -xzf openshift-client-linux.tar.gz sudo mv ./oc /usr/local/bin sudo mv ./kubectl /usr/local/bin 2.インストールされたコマンドのバージョンを確認します。\noc コマンドのバージョンを確認します。oc コマンドは kubectl を拡張した OpenShift 独自のコマンドです。kubectl コマンドとほぼ同じ使い方ができます。\noc version 出力例 ↕ $ oc version Client Version: 4.14.2 Kustomize Version: v5.0.1 Unable to connect to the server: dial tcp: lookup api.my-hpc-cluster.rc4b.p3.openshiftapps.com on 172.28.240.1:53: no such host $ rosa コマンドのバージョンを確認します。rosa コマンドは、主に oc コマンドで取り扱う OpenShift のレイヤーより下のレイヤーを取り扱うコマンドです。AWSインフラにアクセスしてクラスターの作成/削除を行ったり、Kubernetes でカバーされていない AWS とのインフラ周りに関連する作業を行う時に使用します。\nrosa version 出力例 ↕ $ rosa version 1.2.31 I: Your ROSA CLI is up to date. "},{"id":4,"href":"/docs/rosa-hcp/basic_features/rosa-hcp-internal-registry/rosa-hcp-internal-registry/","title":"2. 内部 Image Registry を使用する","section":"ROSA 基本機能","content":" 1. 内部 Image Registry の公開 # Image Registry をインターネットに公開します。\noc patch configs.imageregistry.operator.openshift.io/cluster --patch \u0026#39;{\u0026#34;spec\u0026#34;:{\u0026#34;defaultRoute\u0026#34;:true}}\u0026#39; --type=merge 2. ローカル Image Registry へのログイン # Image Registry の ドメイン名を取得します。\nexport IMAGE_SERVER=`oc get route default-route -n openshift-image-registry --template=\u0026#39;{{ .spec.host }}\u0026#39;` Image Registry にログインします。\npodman login -u `oc whoami` -p `oc whoami --show-token` ${IMAGE_SERVER} 3. ローカル Image Registry への Image の Push # 現在、ある image を確認します。\nnginx $ podman images REPOSITORY TAG IMAGE ID CREATED SIZE localhost/new-nginx latest d623ca329bc4 19 minutes ago 303 MB nginx $ 作成したローカルイメージにタグを付けます。\npodman tag localhost/new-nginx:latest $IMAGE_SERVER/new-nginx/mynginx:latest イメージを push します\npodman push $IMAGE_SERVER/new-nginx/mynginx:latest 4. Push した Image を使用した Deployment の作成 # ローカル Image Registry に Push したイメージを使用して Deploy します。new-app で一気に Service まで作成します。\noc new-app --name new-nginx --image $IMAGE_SERVER/new-nginx/mynginx:latest new-nginx という名前で Deployment と Service が作成されている事を確認します。\n$ oc get deployment,service 実行例 ↕ $ oc get deployment,service NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/new-nginx 1/1 1 1 5m8s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/new-nginx ClusterIP 172.30.252.226 \u0026lt;none\u0026gt; 8080/TCP 5m8s service/nginx-sample ClusterIP 172.30.121.16 \u0026lt;none\u0026gt; 8080/TCP,8443/TCP 3h46m nginx $ 今度は Pod が起動している事を確認します。\noc get pods 実行例 ↕ $ oc get pods NAME READY STATUS RESTARTS AGE new-nginx-599f687494-vk78j 1/1 Running 0 7s $ サービスを公開します。\noc expose svc new-nginx route を確認します。\noc get route 実行例 ↕ $ oc get route NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD new-nginx new-nginx-new-nginx.apps.rosa.my-hpc-cluster.pd80.p3.openshiftapps.com new-nginx 8080-tcp None $ curl でアクセスしてみます。\ncurl \u0026lt;Route の Host名\u0026gt; 実行例 ↕ $ curl new-nginx-new-nginx.apps.rosa.my-hpc-cluster.pd80.p3.openshiftapps.com Hello OpenShift World! $ "},{"id":5,"href":"/docs/rosa-hcp/applications/rosa-hcp-deploy-secure-app/rosa-hcp-deploy-secure-app/","title":"2. 標準の Nginx コンテナをセキュアにする","section":"Application の作成","content":" 1. 標準の Nginx アプリがデプロイできない事を確認する # 以下のコマンドで新しい Project を作ります。自動的に新しい Project に移動します。\noc new-project standard-nginx docker hub にある、nginx の公式イメージを Deployment を使用して Deploy します。\noc create deployment standard-nginx --image nginx pod が CrashLooBackOff になっている事を確認します。これは標準の状態では、高い権限を要求しているため、セキュリティ機能に阻まれて上手くコンテナが生成できてない事を示しています。\noc get pods 出力例 ↕ $ oc get pods NAME READY STATUS RESTARTS AGE standard-nginx-768459d6bc-wldlr 0/1 CrashLoopBackOff 2 (30s ago) 53s $ Pod のログを確認してみます。\noc logs \u0026lt;Pod 名\u0026gt; 出力例 ↕ $ oc logs standard-nginx-768459d6bc-wldlr /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/ /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh 10-listen-on-ipv6-by-default.sh: info: can not modify /etc/nginx/conf.d/default.conf (read-only file system?) /docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh /docker-entrypoint.sh: Configuration complete; ready for start up 2023/12/07 04:23:32 [warn] 1#1: the \u0026#34;user\u0026#34; directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:2 nginx: [warn] the \u0026#34;user\u0026#34; directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:2 2023/12/07 04:23:32 [emerg] 1#1: mkdir() \u0026#34;/var/cache/nginx/client_temp\u0026#34; failed (13: Permission denied) nginx: [emerg] mkdir() \u0026#34;/var/cache/nginx/client_temp\u0026#34; failed (13: Permission denied) $ 幾つか権限のエラーのようなものが出ている事を確認できるはずです。 これは OpenShift がデフォルトで、一般的には不必要な強い権限をもったアプリケーションの実行を防ぐ設定になっているため発生します。\nコンテナ環境は、仮想マシンと違い、一つのホストのカーネルを共有している環境であるため、その上で稼働するアプリの権限も適切に管理する必要があります。\n2. Nginx をセキュアに作り直す # DevSpace にログインします。\nOpenShift で起動できるように、あらかじめ non root 化や、Kubernetes 環境用にカスタマイズされた nginx.conf ファイルと、イメージビルド用の Dockerfile をダウンロードして変更点を観察してみます。\ngit clone https://github.com/yuhkih/nginx-for-openshift.git ここでは標準の nginx のアプリをセキュアに作りなおすと同時に、Kubernetes 環境にそったカスタマイズをしてみます。\nRule1: ログやエラーはローカル・ファイルではなく、標準出力 / 標準入力に吐き出す (これはセキュリティというより Kubenretes 上のコンテナの一般的な\u0026quot;有るべし\u0026quot;)\nRule2: non-root ユーザーで起動できるように、nginx 等の固有ユーザー名は使用しない (Dockerfile 内の USER 指定がある場合いは、消す必要まではないが、書いてあっても OpenShiftでは無視される。ランダムな Userが割り当てられる）\nRule3: non-root ユーザーで起動できるように、well-know port と呼ばれる 1024以下の TCPポートは使用しない\nRule4: non-root ユーザーで起動できるように、Process ID 等の保存に /run 等の Linux のシステムディレクトリは使用しない\nこのルールに従っていれば、大半の Kubernetes 環境にコンテナをデプロイする事が可能です。\nnginx の設定ファイルである nginx.conf を以下のように書き替えます。[1]～[4]\n# For more information on configuration, see: # * Official English Documentation: http://nginx.org/en/docs/ # * Official Russian Documentation: http://nginx.org/ru/docs/ # user nginx; # [1] 特定の User 名を使用しないようにコメントアウトします worker_processes auto; # error_log /var/log/nginx/error.log; # [2] エラーログは標準エラーに出力するように書き直します。 error_log /dev/stderr ; # pid /run/nginx.pid;　# [3] Proccess ID の保存は /run を使わずに /tmp に変更します。 pid /tmp/nginx.pid; # Load dynamic modules. See /usr/share/doc/nginx/README.dynamic. include /usr/share/nginx/modules/*.conf; events { worker_connections 1024; } http { log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; # access_log /var/log/nginx/access.log main; access_log /dev/stdout main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; # Load modular configuration files from the /etc/nginx/conf.d directory. # See http://nginx.org/en/docs/ngx_core_module.html#include # for more information. include /etc/nginx/conf.d/*.conf; server { # listen 80 default_server; # listen [::]:80 default_server; # [4] 1024以下の Well-known ポートは使用しない。ここでは8080に変更します。 listen 0.0.0.0:8080; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / { } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } } $ index.html\nHello OpenShift World ! Dockerfile\nFROM redhat/ubi8 RUN yum install -y nginx COPY index.html /usr/share/nginx/html/index.html COPY nginx.conf /etc/nginx/nginx.conf EXPOSE 8080 CMD [\u0026#34;-g\u0026#34;,\u0026#34;daemon off;\u0026#34;] ENTRYPOINT [\u0026#34;nginx\u0026#34;] このサンプルでは必要ありませんが、root group (GID=0) に所属するユーザーが OpenShift によって自動的に割り当てられるので、アプリの実行に必要なディレクトリに対して Dockefile 内で以下をおこなっておくのがベストプラクティスとされています。\nRUN chgrp -R 0 /some/directory \u0026amp;\u0026amp; \\ chmod -R g=u /some/directory こうする事で、/some/directory に、root group(GID=0) のユーザーにアプリの実行に十分な権限を与える事ができます。なお root group というのは、名前とは裏腹にただの一般グループで特別な権限を持つグループではありません。\nこれらのファイルを使用して Image をビルドします。\npodman build . -t new-nginx ビルドした Image を確認します。\npodman images 出力例 ↕ $ podman images REPOSITORY TAG IMAGE ID CREATED SIZE localhost/new-nginx latest 3c732cd2eabb 21 seconds ago 303 MB $ "},{"id":6,"href":"/docs/rosa-hcp/create-delete/rosa-hcp-create/","title":"3. ROSA HCP Cluster の作成","section":"ROSA Cluster の作成と削除","content":" 1. Terraform を使用した ROSA を install する AWS Network の作成 # HCP ROSA は、ユーザーが既にもっているネットワークにデプロイする事が前提になります。 ここでは Terraform を使用して AWS　上に Network を作成します。\nこの手順は、公式ドキュメントの「Creating a Vritual Private Cloud for your ROSA with HCP clusters 」をベースにしています。\n1.1. Terraform を使用した AWS Network リソースの作成 # サンプルで提供されている terraform のテンプレートを使って、AWS の VPC、Subnet、NAT Gateway 等の必要なリソースを作成します。\ngit clone https://github.com/openshift-cs/terraform-vpc-example cd terraform-vpc-example terraform init 変数を準備しておきます。\nexport CLUSTER_NAME=myhcpcluster export REGION=ap-northeast-1 Terraform の plan を作成します。\nSingle AZ の Network 構成をデプロイするか、Multi AZ の Network をデプロイするか、どちらかを選びます。\nSingle AZ Network terraform plan -out rosa.tfplan -var region=$REGION -var cluster_name=$CLUSTER_NAME Multi AZ Network terraform plan -out rosa.tfplan -var region=$REGION -var cluster_name=$CLUSTER_NAME -var single_az_only=false Plan を apply して Network を作成します。\nterraform apply rosa.tfplan 作成された AWS のサブネットIDを変数にセットしておきます。カンマ区切りで6つのサブネットIDが変数にセットされます。\nexport SUBNET_IDS=$(terraform output -raw cluster-subnets-string) 1.2. 作成された Subnet と NAT Gateway の確認 # terraform で apply した時のログにも出ていますが、ここでは AWS CLI の練習も兼ねて、AWS CLI を使用して作成された VPC と Subnet 等を確認します。\nVPC をリストします。\naws ec2 describe-vpcs | jq -r \u0026#39;.Vpcs[] | [.CidrBlock, .VpcId, .State] | @csv\u0026#39; Subnet をリストします。\naws ec2 describe-subnets | jq -r \u0026#39;.Subnets[] | [ .CidrBlock, .SubnetId, .AvailabilityZone, .Tags[].Value ] | @csv\u0026#39; NAT Gateway をリストします。\naws ec2 describe-nat-gateways | jq -r \u0026#39;.NatGateways[] | [.NatGatewayId, .State] | @csv\u0026#39; 2.ROSA HCP Cluster の 作成 # クラスターを作成するには、Red Hat Customer ポータルの User アカウントが必要です。無料で作成できます。Red Hat Customer ポータルの Userを作成した後、以下のコマンドでログインします。\nrosa login 必要な IAM Role を作成します。いろいろ聞かれますが、全てデフォルトで大丈夫です。\nrosa create account-roles --hosted-cp 必要な変数が全てセットされているか再確認します。もしセットされてない場合は、以前の手順に戻ってセットして下さい。\necho $CLUSTER_NAME echo $REGION echo $SUBNET_IDS Cluster の作成を開始します。いろいろ聞かれますが、全てデフォルトで大丈夫です。\nrosa create cluster --cluster-name=$CLUSTER_NAME --sts --hosted-cp --region=$REGION --subnet-ids=$SUBNET_IDS Cluster の作成を開始した後に Operator Role を作成します。\nrosa create operator-roles --cluster $CLUSTER_NAME -m auto --yes OIDC Provider を作成します。\nrosa create oidc-provider --cluster $CLUSTER_NAME -m auto --yes ROSA のクラスターができるまで以下のコマンドでモニターします。大体 10分ほどかかるはずです。\nrosa logs install -c $CLUSTER_NAME --watch 3.ROSA HCP Cluster へのアクセス確認 # インストールが完了したら管理者ユーザーを作成します。 ログインコマンド (oc login) パスワード付きで標準出力に表示されます。これはコマンドが終了してから、数分待つ必要があります。\nrosa create admin --cluster=$CLUSTER_NAME コマンド実行例 ↕ $ rosa create admin --cluster=$CLUSTER_NAME I: Admin account has been added to cluster \u0026#39;my-hpc-cluster\u0026#39;. I: Please securely store this generated password. If you lose this password you can delete and recreate the cluster admin user. I: To login, run the following command: oc login https://api.my-hpc-cluster.rc4b.p3.openshiftapps.com:443 --username cluster-admin --password abc123-XYZZH-1dNpZ-DBVjg I: It may take several minutes for this access to become active. $ 数分待ってから、上の出力で現れた api server の URL、password を使ってログインコマンド(oc login) を実行します。 (準備ができるまで 401 Unauthorized が出ます)\noc login \u0026lt;API Server\u0026gt; --username cluster-admin --password \u0026lt;password\u0026gt; コマンド実行例 ↕ $ oc login https://api.my-hpc-cluster.rc4b.p3.openshiftapps.com:443 --username cluster-admin --password abc123-XYZZH-1dNpZ-DBVjg Login successful. You have access to 77 projects, the list has been suppressed. You can list all projects with \u0026#39;oc projects\u0026#39; Using project \u0026#34;default\u0026#34;. $ oc get nodes コマンドで compute node ができたか確認します。Worker node が 3本表示されるはずです。 (まれに node の作成に時間がかかる場合があります。何も node が表示されない場合は、さらに10分程度待ってく見てください)\noc get nodes コマンド実行例 ↕ $ oc get nodes NAME STATUS ROLES AGE VERSION ip-10-0-0-72.us-east-2.compute.internal Ready worker 9m44s v1.27.6+b49f9d1 ip-10-0-1-195.us-east-2.compute.internal Ready worker 70s v1.27.6+b49f9d1 ip-10-0-2-242.us-east-2.compute.internal Ready worker 9m28s v1.27.6+b49f9d1 $ 4.構成を探って見る # rosa list machinepool コマンドで、AZ毎に machinepool が出来ている事を確認します。machinepool単位で Node 数を増やす事ができます。\n$ rosa list machinepool -c $CLUSTER_NAME コマンド実行例 ↕ $ rosa list machinepool -c $CLUSTER_NAME ID AUTOSCALING REPLICAS INSTANCE TYPE LABELS TAINTS AVAILABILITY ZONE SUBNET VERSION AUTOREPAIR workers-0 No 1/1 m5.xlarge us-east-2b subnet-084bb65941bee3d24 4.14.3 Yes workers-1 No 1/1 m5.xlarge us-east-2a subnet-0f0b7ebc07df35c69 4.14.3 Yes workers-2 No 1/1 m5.xlarge us-east-2c subnet-0fdeb4dc0c5415267 4.14.3 Yes $ rosa list ingress コマンドで Cluster と一緒に作成された ingress を確認してみます。default の Load Balancer には NLB が使われているはずです。LB-TYPE を確認します。 この ingress 経由で、HTTP/HTTPS アプリケーションが公開されます。\nrosa list ingress -c $CLUSTER_NAME コマンド実行例 ↕ $ rosa list ingress -c $CLUSTER_NAME ID APPLICATION ROUTER PRIVATE DEFAULT ROUTE SELECTORS LB-TYPE EXCLUDED NAMESPACE WILDCARD POLICY NAMESPACE OWNERSHIP HOSTNAME TLS SECRET REF m3x6 https://apps.rosa.my-hpc-cluster.rc4b.p3.openshiftapps.com no yes nlb $ "},{"id":7,"href":"/docs/rosa-hcp/create-delete/rosa-hcp-delete-cluster/","title":"4. ROSA HCP Cluster の削除","section":"ROSA Cluster の作成と削除","content":" 1.変数を確認する # クラスター名が変数にセットされているか確認します。\necho $CLUSTER_NAME 2.ROSA クラスターの削除 # 以下のコマンドでクラスターを削除します。\nrosa delete cluster -c $CLUSTER_NAME ログの最後の出てくる以下の部分はメモしておきます。\nrosa delete operator-roles --prefix \u0026lt;IAM Role prefix\u0026gt; rosa delete oidc-provider --oidc-config-id \u0026lt;OIDC provider config ID\u0026gt; 実行例 ↕ $ rosa delete cluster -c $CLUSTER_NAME ? Are you sure you want to delete cluster my-hpc-cluster? Yes I: Cluster \u0026#39;my-hpc-cluster\u0026#39; will start uninstalling now I: Your cluster \u0026#39;my-hpc-cluster\u0026#39; will be deleted but the following objects may remain I: Operator IAM Roles: - arn:aws:iam::972708010773:role/my-hpc-cluster-n8m7-kube-system-capa-controller-manager - arn:aws:iam::972708010773:role/my-hpc-cluster-n8m7-kube-system-control-plane-operator - arn:aws:iam::972708010773:role/my-hpc-cluster-n8m7-kube-system-kms-provider - arn:aws:iam::972708010773:role/my-hpc-cluster-n8m7-openshift-image-registry-installer-cloud-cre - arn:aws:iam::972708010773:role/my-hpc-cluster-n8m7-openshift-ingress-operator-cloud-credentials - arn:aws:iam::972708010773:role/my-hpc-cluster-n8m7-openshift-cluster-csi-drivers-ebs-cloud-cred - arn:aws:iam::972708010773:role/my-hpc-cluster-n8m7-openshift-cloud-network-config-controller-cl - arn:aws:iam::972708010773:role/my-hpc-cluster-n8m7-kube-system-kube-controller-manager I: OIDC Provider : https://rh-oidc.s3.us-east-1.amazonaws.com/267bh4stja59r9gc896alcbdfls2h6jp I: Once the cluster is uninstalled use the following commands to remove the above aws resources. rosa delete operator-roles --prefix my-hpc-cluster-n8m7 rosa delete oidc-provider --oidc-config-id 267bh4stja59r9gc896alcbdfls2h6jp I: To watch your cluster uninstallation logs, run \u0026#39;rosa logs uninstall -c my-hpc-cluster --watch\u0026#39; $ クラスタの削除過程は、以下のコマンドで確認できます。\nrosa logs uninstall -c $CLUSTER_NAME --watch 3.IAM Role と OIDC Provider の削除 # クラスターの削除が完了したら、Operator 用の IAM Role と OIDC Provider を削除します。\nOperator 用 IAM Role を削除します。これは、rosa delete cluster コマンドを実行した時にログの最後に出てきたコマンドです。 この時、最後に -m auto --yes を付け足すと非インタラクティブに削除してくれます。\nrosa delete operator-roles --prefix \u0026lt;IAM Role prefix\u0026gt; -m auto --yes OIDC Provider を削除します。これは、rosa delete cluster コマンドを実行した時にログの最後に出てきたコマンドです。 この時、最後に -m auto --yes を付け足すと非インタラクティブに削除してくれます。\nrosa delete oidc-provider --oidc-config-id \u0026lt;OIDC provider config ID\u0026gt; -m auto --yes 4.Terraform で作成した AWS のネットワークを削除する # Red Hat で提供している terraform のサンプルを使用して Network を作成した場合は、git clone したディレクトリに移動して、以下のコマンドで削除します。\nterraform destroy "},{"id":8,"href":"/docs/rosa-hcp/create-delete/rosa-hcp-debug/","title":"5.[補則] Network 構成のテスト","section":"ROSA Cluster の作成と削除","content":"HCP ROSA では、ユーザーが AWS 上に作成した Network 上にクラスターを作成します。 そのため、一番多いトラブルが、AWS Network に関するものです。\nここでは、Network の疎通確認ツールである、rosa verify network を使用してみます。\nrosa verify network を使用すると ROSA をインストールする VPC / Subnet から外部レジストリー等と必要な疎通が取れているか確認できます。\n1. AWS network の SubnetId を確認する # AWS の Subnet id を取得します。\naws ec2 describe-subnets | jq -r \u0026#39;.Subnets[] | [ .CidrBlock, .SubnetId, .AvailabilityZone, .Tags[].Value ] | @csv\u0026#39; コマンド実行例 ↕ $ aws ec2 describe-subnets | jq -r \u0026#39;.Subnets[] | [ .CidrBlock, .SubnetId, .AvailabilityZone, .Tags[].Value ] | @csv\u0026#39; \u0026#34;10.0.128.0/24\u0026#34;,\u0026#34;subnet-07098183112673e5e\u0026#34;,\u0026#34;us-east-2a\u0026#34;,\u0026#34;true\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;ROSA\u0026#34;,\u0026#34;my-hpc-cluster-vpc-public-use2-az1\u0026#34;,\u0026#34;my-hpc-cluster\u0026#34; \u0026#34;10.0.0.0/24\u0026#34;,\u0026#34;subnet-06cf09e21d4ab1e8f\u0026#34;,\u0026#34;us-east-2a\u0026#34;,\u0026#34;ROSA\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;true\u0026#34;,\u0026#34;my-hpc-cluster\u0026#34;,\u0026#34;my-hpc-cluster-vpc-private-use2-az1\u0026#34; $ この例では ROSA Public Cluster 用に subnet-07098183112673e5e (Pulbic Subnet) と subnet-06cf09e21d4ab1e8f (Private Sunbet) を作成しています。\n2. ManagedOpenShift-Installer-Role IAM Role の ARN を確認する。 # 作成された IAM Role は以下の方法で確認できます。\nrosa list account-roles コマンド実行例 ↕ $ rosa list account-roles I: Fetching account roles ROLE NAME ROLE TYPE ROLE ARN OPENSHIFT VERSION AWS Managed ManagedOpenShift-ControlPlane-Role Control plane arn:aws:iam::864046375925:role/ManagedOpenShift-ControlPlane-Role 4.14 No ManagedOpenShift-Installer-Role Installer arn:aws:iam::864046375925:role/ManagedOpenShift-Installer-Role 4.14 No ManagedOpenShift-Support-Role Support arn:aws:iam::864046375925:role/ManagedOpenShift-Support-Role 4.14 No ManagedOpenShift-Worker-Role Worker arn:aws:iam::864046375925:role/ManagedOpenShift-Worker-Role 4.14 No $ 3. 作成した ROSA 用の Network の疎通を検証する # ネットワークの検証を行います。検証したい subnet id と、ManagedOpenShift-Installer-Role IAM Role の arn が必要になります。\n必要な情報を環境変数にセットします。Subnetが複数ある場合は、カンマで区切って並べます。\nexport REGION=ap-northeast-1 export SUBNET_IDS=subnet-07098183112673e5e,subnet-06cf09e21d4ab1e8f export INSTALL_IAM_ROLE_ARN=arn:aws:iam::864046375925:role/ManagedOpenShift-Installer-Role 以下のコマンドを実行する事で ROSA の稼働に必要な疎通が取れているか確認できます。\nrosa verify network --watch --region $REGION --subnet-ids $SUBNET_IDS --role-arn $INSTALL_IAM_ROLE_ARN 以下は Network の構成がパスした際の出力例です。\nコマンド実行例 ↕ $ rosa verify network --watch --region $REGION --subnet-ids $SUBNET_IDS --role-arn $INSTALL_IAM_ROLE_ARN I: Verifying the following subnet IDs are configured correctly: [subnet-07098183112673e5e subnet-06cf09e21d4ab1e8f] I: subnet-07098183112673e5e: passed I: subnet-06cf09e21d4ab1e8f: passed $ "},{"id":9,"href":"/docs/rosa-hcp/operators/rosa-hcp-install-devspaces/rosa-hcp-install-devspace/","title":"Dev Spaces Operator","section":"ROSA Operators","content":"\n"},{"id":10,"href":"/docs/rosa-hcp/operators/rosa-hcp-web-terminal/rosa-hcp-web-terminal/","title":"Web Terminal Operator","section":"ROSA Operators","content":" Web Terminal Operator # Web Terminal Operator を使用すると、OpenShift コンソール内に Web Browser ベースのコンソールを生成する事ができます。 ユーザーのローカル端末に oc コマンドをセットアップした環境を作らなくても、各種 CLI 操作がブラウザー上で可能になります。\n「Operator Hub」から「Web Terminal」オペレーターを探します。 設定はデフォルトのまま「Install」 をクリックします。 設定はデフォルトのまま 「Install」をクリックします。 以下の画面になれば、インストールは完了です。\nブラウザーの画面をリロードします。コンソールの右上に新しいアイコンが現れているので、それをクリックします。 コンソールの下側に新しい Window ペインが現れるはずです。「Start」をクリックします。 既に各種のコマンドが使えるように環境がセットアップ済みのコンソールが使用できるようになります。 "},{"id":11,"href":"/docs/rosa-hcp/collapsed/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":" 4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":12,"href":"/docs/rosa-hcp/collapsed/3rd-level/","title":"3rd Level","section":"Collapsed","content":" 3rd Level of Menu # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); "},{"id":13,"href":"/docs/rosa-hcp/hidden/","title":"Hidden","section":"Docs","content":" This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":14,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":" Buttons # draft : true # # Buttons are styled links that can lead to local page or external link.\nExample # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute "},{"id":15,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":" Columns # Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nMid Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nRight Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":16,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":" Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample # {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content # Lorem markdownum insigne\u0026hellip;\n"},{"id":17,"href":"/docs/shortcodes/expand/","title":"Expand","section":"Shortcodes","content":" Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample # Default # {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Expand ↕ Markdown content # Lorem markdownum insigne\u0026hellip;\nWith Custom Label # {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Custom Label ... Markdown content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":18,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":" Hints # Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa "},{"id":19,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":" Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample # {{\u0026lt; mermaid class=\u0026#34;optional\u0026#34; \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. "},{"id":20,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":" Section # Section renders pages in section as definition list, using title and description. Optional param summary can be used to show or hide page summary\nExample # {{\u0026lt; section [summary] \u0026gt;}} First Page First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Second Page Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. "},{"id":21,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":" First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":22,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":" Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":23,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":" Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example # MacOS MacOS # This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux # This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows # This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":24,"href":"/docs/shortcodes/katex/","title":"KaTeX","section":"Shortcodes","content":" KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample # {{\u0026lt; katex display=true class=\u0026#34;optional\u0026#34; \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Text continues here.\n"}]